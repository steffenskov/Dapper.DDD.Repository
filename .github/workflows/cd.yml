name: "Continuous Deployment"

on:
    push:
        branches: [main]

concurrency:
  group: nuget-${{ github.ref }}
  cancel-in-progress: true

env:
    PROJECT_PATH: "src/Dapper.DDD.Repository/Dapper.DDD.Repository.csproj"
    DI_PROJECT_PATH: "src/Dapper.DDD.Repository.DependencyInjection/Dapper.DDD.Repository.DependencyInjection.csproj"
    MYSQL_PROJECT_PATH: "src/Dapper.DDD.Repository.MySql/Dapper.DDD.Repository.MySql.csproj"
    POSTGRESQL_PROJECT_PATH: "src/Dapper.DDD.Repository.PostGreSql/Dapper.DDD.Repository.PostGreSql.csproj"
    SQL_PROJECT_PATH: "src/Dapper.DDD.Repository.Sql/Dapper.DDD.Repository.Sql.csproj"
    SOLUTION_PATH: "Dapper.DDD.Repository.sln"
    PACKAGE_OUTPUT_DIRECTORY: ${{ github.workspace }}/output
    NUGET_SOURCE_URL: "https://api.nuget.org/v3/index.json"

jobs:
    test:
        name: "test"
        runs-on: "ubuntu-latest"

        steps:
            - name: "Checkout"
              uses: actions/checkout@v4

            - name: "Install dotnet"
              uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: 8.0.x

            - name: "Restore packages"
              run: dotnet restore ${{ env.SOLUTION_PATH }}

            - name: Test
              run: dotnet test ${{ env.SOLUTION_PATH }}

    deploy:
        needs: test
        runs-on: "ubuntu-latest"

        steps:
            - name: "Checkout"
              uses: actions/checkout@v4

            - name: "Install dotnet"
              uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: 8.0.x

            - name: "Restore packages"
              run: dotnet restore ${{ env.SOLUTION_PATH }}

            - name: "Build project"
              run: dotnet build ${{ env.SOLUTION_PATH }} --no-restore --configuration Release

            - name: "Pack Repository"
              run: dotnet pack ${{ env.PROJECT_PATH }} --no-restore --no-build --configuration Release --include-symbols -p:SymbolPackageFormat=snupkg --output ${{ env.PACKAGE_OUTPUT_DIRECTORY }}

            - name: "Pack DependencyInjection"
              run: dotnet pack ${{ env.DI_PROJECT_PATH }} --no-restore --no-build --configuration Release --include-symbols -p:SymbolPackageFormat=snupkg --output ${{ env.PACKAGE_OUTPUT_DIRECTORY }}

            - name: "Pack MySql"
              run: dotnet pack ${{ env.MYSQL_PROJECT_PATH }} --no-restore --no-build --configuration Release --include-symbols -p:SymbolPackageFormat=snupkg --output ${{ env.PACKAGE_OUTPUT_DIRECTORY }}

            - name: "Pack PostGreSql"
              run: dotnet pack ${{ env.POSTGRESQL_PROJECT_PATH }} --no-restore --no-build --configuration Release --include-symbols -p:SymbolPackageFormat=snupkg --output ${{ env.PACKAGE_OUTPUT_DIRECTORY }}

            - name: "Pack Sql"
              run: dotnet pack ${{ env.SQL_PROJECT_PATH }} --no-restore --no-build --configuration Release --include-symbols -p:SymbolPackageFormat=snupkg --output ${{ env.PACKAGE_OUTPUT_DIRECTORY }}

            - name: "Push package"
              run: dotnet nuget push ${{ env.PACKAGE_OUTPUT_DIRECTORY }}/*.nupkg -k ${{ secrets.NUGET_API_KEY }} -s ${{ env.NUGET_SOURCE_URL }} --skip-duplicate
